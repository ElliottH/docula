##
## A simplified grammar for C, written in Treetop.
##
## @file
## @author Elliott Hillary <ejh67@cam.ac.uk>
## @date 2012-12-12
## @license MIT
##

grammar CSimple
  rule start
    (
      extern_c_block
      / function
      / struct_union_declaration
      / variable
      / directive
      / typedef
      / docstring
      / comment
      / WHITESPACE
    )+
    <StartNode>
  end

  rule extern_c_block
    'extern' WHITESPACE '"C"' _ LEFTCURLY
      start+
    RIGHTCURLY
    <ExternBlockNode>
  end

  rule struct_union_declaration
    docstring? _
    su WHITESPACE name
    struct_union_definitions?
    name?
    SEMICOLON
    <StructUnionNode>
  end

  rule su
    'struct' <SUNode> / 'union' <SUNode>
  end

  rule struct_union_definitions
    LEFTCURLY
    (struct_union_definition <StructUnionDefinitionNode>)+
    RIGHTCURLY
    <StructUnionDefinitionsNode>
  end
  rule struct_union_definition
    function
    / struct_variable
    / docstring _
    / comment _
  end

  rule struct_variable
    docstring?
    type name
    ( _ COLON (name / value))?
    SEMICOLON
    <VariableNode>
  end

  rule variable
    docstring? _ struct_or_union SEMICOLON <VariableNode>
    / docstring? _ enum_definition SEMICOLON <VariableNode>
    / docstring? _ type name rhs? (COMMA name rhs?)* SEMICOLON <VariableNode>
  end

  rule rhs
    LEFTCURLY RIGHTCURLY
    / LEFTCURLY RHS ((COMMA / SEMICOLON) RHS)* SEMICOLON? RIGHTCURLY
    / EQUAL
    (
      string
      / char_constant
      / LEFTCURLY RHS (COMMA RHS)* RIGHTCURLY
      / RHS
    )
  end

  rule RHS
    (![{},;] .)+
  end

  rule function
    docstring?
    _
    function_prototype
    (
      SEMICOLON
      / LEFTCURLY function_body* RIGHTCURLY
    )
    <FunctionNode>
  end

  rule function_prototype
    ('inline' _)? type name LEFT arguments? RIGHT <FunctionPrototypeNode>
  end
  rule arguments
    argument (COMMA argument)*
    <ArgumentsNode>
  end
  rule argument
    type name <ArgumentNode>
    / 'void' <ArgumentNode>
  end

  rule function_body
    function_body_item+ <FunctionBodyNode>
  end
  rule function_body_item
    LEFTCURLY function_body* RIGHTCURLY
    / comment
    / string
    / char_constant
    / (!(["{}'] / '/*' / '//' / '# ') .)+
  end

  rule comment
    '//' ( !EOL .)* EOL <CommentNode>
    / '# ' ( !EOL .)* EOL <CommentNode>
    / (multiline_comment) <CommentNode>
  end
  rule multiline_comment
    '/*'
    comment_contents?
    '*/'
  end
  rule end_comment
    '*/'
  end
  rule comment_contents
    (!end_comment (. / EOL))*
  end

  rule docstring
    '///' ( !EOL .)* EOL <DocstringNode>
    / '## ' ( !EOL .)* EOL <DocstringNode>
    / multiline_docstring
  end
  rule multiline_docstring
    '/**'
    (
      !end_comment
      (. / EOL)
    )*
    '*/'
    <DocstringNode>
  end

  rule directive
    docstring? _ '#' ( !UNESC_EOL .)* UNESC_EOL <DirectiveNode>
  end

  rule typedef
    docstring? _ 'typedef' WHITESPACE type type SEMICOLON <TypeDefNode>
  end

  rule RESERVED
    '\b'
    (
    'auto' / 'break' / 'case' / 'char' / 'const' / 'continue' / 'default' /
    'do' / 'double' / 'else' / 'enum' / 'extern' / 'float' / 'for' / 'goto' /
    'if' / 'inline' / 'int' / 'long' / 'register' / 'restrict' / 'return' /
    'short' / 'signed' / 'sizeof' / 'static' / 'struct' / 'switch' / 'typedef' /
    'union' / 'unsigned' / 'void' / 'volatile' / 'while'
    )
    '\b'
  end
  rule storage_class
    (
      'extern' /
      'static' /
      'auto' /
      'register'
    ) WHITESPACE
  end
  rule TYPE
      'char' / 'enum' / 'float' / 'int' / 'long' / 'long long' / 'short' / 'void'
  end
  rule type
    ('extern' WHITESPACE '"C"' WHITESPACE)?
    storage_class*
    (('unsigned' _) / ('signed' _ ) / ('const' _) / ('inline' _))*
    (
      struct_or_union
      / enum_definition
      / (!struct_or_union (name / TYPE))
    )
    _
    <TypeNode>
  end

  rule struct_or_union
    (
      'struct' /
      'union'
    ) WHITESPACE
    name
    #struct_or_union_definition?
  end

  rule struct_or_union_definition
    LEFTCURLY
    (
      type name ( _ COLON (name / value))? SEMICOLON
      / function_prototype _
      / docstring _
      / comment _
    )+
    RIGHTCURLY
  end

  rule enum_definition
    'enum' WHITESPACE name
    (
    LEFTCURLY name (EQUALS (name / value))?
    (COMMA name (EQUALS (name / value))?)*
    _ RIGHTCURLY
    )?
  end

  rule name
    STAR*
    !RESERVED ([a-zA-Z_] [a-zA-Z0-9_]*)
    array*
    _
    <NameNode>
  end

  rule array
    LEFTSQUARE (name / value)? RIGHTSQUARE
  end

  rule string
    DOUBLEQUOTE string_body* DOUBLEQUOTE
  end

  rule char_constant
    QUOTE_NOWS char_body QUOTE_NOWS
  end

  rule char_body
    !char_chars .
    / escape_sequence
  end

  rule char_chars
    ['\\\n\r]
  end

  rule string_body
      string_char+
      / escape_sequence
  end

  rule string_char
      [^"\\\n\r]
  end

  rule escape_sequence
      BACKSLASH ['"\\abfnrtv]
      / BACKSLASH 'x' hexadecimal_digit+
      / BACKSLASH octal_digit 1..3
      / BACKSLASH 'u' hexadecimal_digit 4..4
      / BACKSLASH 'U' hexadecimal_digit 8..8
  end

  rule value
    sign?
    (
      float_value
      / hexadecimal_value
      / octal_value
      / decimal_value
    )
    value_suffix?
  end

  rule sign
    [+-]
  end

  rule decimal_value
    decimal_prefix decimal_digit*
    / '0'
  end
  rule decimal_prefix
    [1-9]
  end
  rule decimal_digit
    [0-9]
  end

  rule octal_value
    octal_prefix octal_digit+
  end
  rule octal_prefix
    '0'
  end
  rule octal_digit
    [0-7]
  end

  rule hexadecimal_value
    hexadecimal_prefix hexadecimal_digit+
  end
  rule hexadecimal_prefix
    '0' [Xx]
  end
  rule hexadecimal_digit
    [0-9a-fA-F]
  end

  rule float_value
    (decimal_value? DOT decimal_digit*)
    / (octal_value? DOT octal_digit*)
    / (hexadecimal_value? DOT hexadecimal_digit*)
  end

  rule value_suffix
    'u' / 'U'
    / 'L' 1..2 / 'l' 1..2
    / 'e' sign? value / 'E' sign? value
    / 'p' sign? value / 'P' sign? value
  end

  rule _
    WHITESPACE?
  end
  rule WHITESPACE
    ([ \n\r\t\f\v])+
  end
  rule EOL
    [\n]
  end
  rule UNESC_EOL
    !'\\' EOL
  end

  rule EQUAL
    EQUALS
    / PLUSEQUALS
    / MINUSEQUALS
    / DIVEQUALS
    / STAREQUALS
    / BAREQUALS
    / ANDEQUALS
    / HATEQUALS
    / PERCENTEQUALS
    / GREATERGREATEREQUALS
    / LESSLESSEQUALS
  end

  rule DOT '.' _ end
  rule ELLIPSIS '...' _ end
  rule ARROW '->' _ end
  rule PLUS '+' _ end
  rule PLUSPLUS '++' _ end
  rule PLUSEQUALS '+=' _ end
  rule MINUS '-' _ end
  rule MINUSMINUS '--' _ end
  rule MINUSEQUALS '-=' _ end
  rule STAR '*' _ end
  rule STAREQUALS '*=' _ end
  rule DIV '/' _ end
  rule DIVEQUALS '/=' _ end
  rule LESS '<' _ end
  rule LESSLESS '<<' _ end
  rule LESSEQUALS '<=' _ end
  rule LESSLESSEQUALS '<<=' _ end
  rule GREATER '>' _ end
  rule GREATERGREATER '>>' _ end
  rule GREATEREQUALS '>=' _ end
  rule GREATERGREATEREQUALS '>>=' _ end
  rule BANG '!' _ end
  rule BANGEQUALS '!=' _ end
  rule BAR '|' _ end
  rule BARBAR '||' _ end
  rule BAREQUALS '|=' _ end
  rule AND '&' _ end
  rule ANDAND '&&' _ end
  rule ANDEQUALS '&=' _ end
  rule EQUALS '=' _ end
  rule EQUALSEQUALS '==' _ end
  rule PERCENT '%' _ end
  rule PERCENTEQUALS '%=' _ end
  rule HAT '^' _ end
  rule HATEQUALS '^=' _ end
  rule QUERY '?' _ end
  rule TILDE '~' _ end
  rule COMMA ',' _ end
  rule COLON ':' _ end
  rule SEMICOLON ';' _ end
  rule LEFTSQUARE '[' _ end
  rule RIGHTSQUARE ']' _ end
  rule LEFTCURLY '{' _ end
  rule RIGHTCURLY '}' _ end
  rule LEFT '(' _ end
  rule RIGHT ')' _ end
  rule QUOTE "'" _ end
  rule QUOTE_NOWS "'" end
  rule DOUBLEQUOTE '"' _ end
  rule BACKSLASH '\\' _ end
end
