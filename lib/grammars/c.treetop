##
## A C grammar defined in treetop, a Ruby DSL.
##
## @file
## @author Elliott Hillary <ejh67@cam.ac.uk>
## @date 2012-10-29
## @license MIT
##

grammar C
  rule start
    (
    _ directive
    / _ docstring
    / _ comment
    / _ function_declaration
    / _ variable_declaration_list
    / WHITESPACE
    )+
  end

# Directive
  rule directive
    '#' ( !EOL .)* EOL
  end


# Docstrings
  rule multiline_docstring
    '/**'
    (
      !'*/'
      (. / EOL)
    )*
    '*/'
  end
  rule docstring
    '///' ( !EOL .)* EOL
    / '## ' ( !EOL .)* EOL
    / multiline_docstring
  end


# Comments
  rule multiline_comment
    '/*'
    (
      !'*/'
      (. / EOL)
    )*
    '*/'
  end
  rule comment
    '//' ( !EOL .)* EOL
    / '# ' ( !EOL .)* EOL
    / multiline_comment
  end

# Functions
  rule function_declaration
    ('inline' _)? type name LEFT fvariable_declaration_list? RIGHT SEMICOLON
  end

  rule fvariable_declaration_list
    fvariable_declaration (COMMA fvariable_declaration)*
  end

  rule fvariable_declaration
    type name
  end

# Variables
  rule variable_declaration_list
    type name (COMMA name)* SEMICOLON
  end

# Utility Rules
  rule name
    STAR 0..2
    !RESERVED ([a-zA-Z_] [a-zA-Z0-9_]*)
  end

  rule type
    storage_class? struct_or_union?
    (!struct_or_union (name / RESERVED))
    _
  end

  rule struct_or_union
    (
      'struct' /
      'union'
    ) WHITESPACE
  end

  rule storage_class
    (
      'extern' /
      'static' /
      'auto' /
      'register'
    ) WHITESPACE
  end
  rule WHITESPACE
    ([ \n\r\t\f\v])+
  end
  rule _
    WHITESPACE?
  end
  rule EOL
    [\n]
  end
  rule RESERVED
    'auto' / 'break' / 'case' / 'char' / 'const' / 'continue' / 'default' /
    'do' / 'double' / 'else' / 'enum' / 'extern' / 'float' / 'for' / 'goto' /
    'if' / 'inline' / 'int' / 'long' / 'register' / 'restrict' / 'return' /
    'short' / 'signed' / 'sizeof' / 'static' / 'struct' / 'switch' / 'typedef' /
    'union' / 'unsigned' / 'void' / 'volatile' / 'while'
  end


  rule DOT '.' _ end
  rule ELLIPSIS '...' _ end
  rule ARROW '->' _ end
  rule PLUS '+' _ end
  rule PLUSPLUS '++' _ end
  rule PLUSEQUALS '+=' _ end
  rule MINUS '-' _ end
  rule MINUSMINUS '--' _ end
  rule MINUSEQUALS '-=' _ end
  rule STAR '*' _ end
  rule STAREQUALS '*=' _ end
  rule DIV '/' _ end
  rule DIVEQUALS '/=' _ end
  rule LESS '<' _ end
  rule LESSLESS '<<' _ end
  rule LESSEQUALS '<=' _ end
  rule LESSLESSEQUALS '<<=' _ end
  rule GREATER '>' _ end
  rule GREATERGREATER '>>' _ end
  rule GREATEREQUALS '>=' _ end
  rule GREATERGREATEREQUALS '>>=' _ end
  rule BANG '!' _ end
  rule BANGEQUALS '!=' _ end
  rule BAR '|' _ end
  rule BARBAR '||' _ end
  rule BAREQUALS '|=' _ end
  rule AND '&' _ end
  rule ANDAND '&&' _ end
  rule ANDEQUALS '&=' _ end
  rule EQUALS '=' _ end
  rule EQUALSEQUALS '==' _ end
  rule PERCENT '%' _ end
  rule PERCENTEQUALS '%=' _ end
  rule HAT '^' _ end
  rule HATEQUALS '^=' _ end
  rule QUERY '?' _ end
  rule TILDE '~' _ end
  rule COMMA ',' _ end
  rule COLON ':' _ end
  rule SEMICOLON ';' _ end
  rule LEFTSQUARE '[' _ end
  rule RIGHTSQUARE ']' _ end
  rule LEFTCURLY '{' _ end
  rule RIGHTCURLY '}' _ end
  rule LEFT '(' _ end
  rule RIGHT ')' _ end
end
